// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Caml_option from "bs-platform/lib/es6/caml_option.js";

function makePropsFromJS(prim) {
  return prim;
}

function makeProps(prim, prim$1, prim$2, prim$3, prim$4, prim$5, prim$6, prim$7, prim$8, prim$9, prim$10, prim$11, prim$12, prim$13, prim$14, prim$15, prim$16, prim$17, prim$18, prim$19, prim$20, prim$21, prim$22, prim$23, prim$24, prim$25, prim$26, prim$27, prim$28, prim$29, prim$30, prim$31, prim$32, prim$33, prim$34, prim$35, prim$36, prim$37, prim$38, prim$39, prim$40, prim$41, prim$42, prim$43, prim$44, prim$45, prim$46, prim$47, prim$48, prim$49, prim$50, prim$51, prim$52, prim$53, prim$54, prim$55, prim$56, prim$57, prim$58, prim$59, prim$60, prim$61, prim$62, prim$63, prim$64, prim$65, prim$66, prim$67, prim$68, prim$69, prim$70, prim$71, prim$72, prim$73, prim$74, prim$75, prim$76, prim$77, prim$78, prim$79, prim$80, prim$81, prim$82, prim$83, prim$84, prim$85, prim$86, prim$87, prim$88, prim$89, prim$90, prim$91, prim$92, prim$93, prim$94, prim$95, prim$96, prim$97, prim$98, prim$99, prim$100, prim$101, prim$102, prim$103, prim$104, prim$105, prim$106, prim$107, prim$108, prim$109, prim$110, prim$111, prim$112, prim$113, prim$114, prim$115, prim$116, prim$117, prim$118, prim$119, prim$120, prim$121, prim$122, prim$123, prim$124, prim$125, prim$126, prim$127, prim$128, prim$129, prim$130, prim$131, prim$132, prim$133, prim$134, prim$135, prim$136, prim$137, prim$138, prim$139, prim$140, prim$141, prim$142, prim$143, prim$144, prim$145, prim$146, prim$147, prim$148, prim$149, prim$150, prim$151, prim$152, prim$153, prim$154, prim$155, prim$156, prim$157, prim$158, prim$159, prim$160, prim$161, prim$162, prim$163, prim$164, prim$165, prim$166, prim$167, prim$168, prim$169, prim$170, prim$171, prim$172, prim$173, prim$174, prim$175, prim$176, prim$177, prim$178, prim$179, prim$180, prim$181, prim$182, prim$183, prim$184, prim$185, prim$186, prim$187, prim$188, prim$189, prim$190, prim$191, prim$192, prim$193, prim$194, prim$195, prim$196, prim$197, prim$198, prim$199, prim$200, prim$201, prim$202, prim$203, prim$204, prim$205, prim$206, prim$207, prim$208, prim$209, prim$210, prim$211, prim$212, prim$213, prim$214, prim$215, prim$216, prim$217, prim$218, prim$219, prim$220, prim$221, prim$222, prim$223, prim$224, prim$225, prim$226, prim$227, prim$228, prim$229, prim$230, prim$231, prim$232, prim$233, prim$234, prim$235, prim$236, prim$237, prim$238, prim$239, prim$240, prim$241, prim$242, prim$243, prim$244, prim$245, prim$246, prim$247, prim$248, prim$249, prim$250, prim$251, prim$252, prim$253, prim$254, prim$255, prim$256, prim$257, prim$258, prim$259, prim$260, prim$261, prim$262, prim$263, prim$264, prim$265, prim$266, prim$267, prim$268, prim$269, prim$270, prim$271, prim$272, prim$273, prim$274, prim$275, prim$276, prim$277, prim$278, prim$279, prim$280, prim$281, prim$282, prim$283, prim$284, prim$285, prim$286, prim$287, prim$288, prim$289, prim$290, prim$291, prim$292, prim$293, prim$294, prim$295, prim$296, prim$297, prim$298, prim$299, prim$300, prim$301, prim$302, prim$303, prim$304, prim$305, prim$306, prim$307, prim$308, prim$309, prim$310, prim$311, prim$312, prim$313, prim$314, prim$315, prim$316, prim$317, prim$318, prim$319, prim$320, prim$321, prim$322, prim$323, prim$324, prim$325, prim$326, prim$327, prim$328, prim$329, prim$330, prim$331, prim$332, prim$333, prim$334, prim$335, prim$336, prim$337, prim$338, prim$339, prim$340, prim$341, prim$342, prim$343, prim$344, prim$345, prim$346, prim$347, prim$348, prim$349, prim$350, prim$351, prim$352, prim$353, prim$354, prim$355, prim$356, prim$357, prim$358, prim$359, prim$360, prim$361, prim$362, prim$363, prim$364, prim$365, prim$366, prim$367, prim$368, prim$369, prim$370, prim$371, prim$372, prim$373, prim$374, prim$375, prim$376, prim$377, prim$378, prim$379, prim$380, prim$381, prim$382, prim$383, prim$384, prim$385, prim$386, prim$387, prim$388, prim$389, prim$390, prim$391, prim$392, prim$393, prim$394, prim$395, prim$396, prim$397, prim$398, prim$399, prim$400, prim$401, prim$402, prim$403, prim$404, prim$405, prim$406, prim$407, prim$408, prim$409, prim$410, prim$411, prim$412, prim$413, prim$414, prim$415, prim$416, prim$417, prim$418, prim$419, prim$420, prim$421, prim$422, prim$423, prim$424, prim$425, prim$426, prim$427, prim$428, prim$429, prim$430, prim$431, prim$432, prim$433, prim$434, prim$435, prim$436, prim$437, prim$438, prim$439, prim$440, prim$441, prim$442, prim$443, prim$444, prim$445, prim$446, prim$447, prim$448, prim$449, prim$450, prim$451, prim$452, prim$453, prim$454, prim$455, prim$456, prim$457, prim$458, prim$459, prim$460, prim$461, prim$462, prim$463, prim$464, prim$465, prim$466, prim$467, prim$468, prim$469, prim$470, prim$471, prim$472) {
  var tmp = { };
  if (prim !== undefined) {
    tmp["aria-details"] = Caml_option.valFromOption(prim);
  }
  if (prim$1 !== undefined) {
    tmp["aria-disabled"] = Caml_option.valFromOption(prim$1);
  }
  if (prim$2 !== undefined) {
    tmp["aria-hidden"] = Caml_option.valFromOption(prim$2);
  }
  if (prim$3 !== undefined) {
    tmp["aria-keyshortcuts"] = Caml_option.valFromOption(prim$3);
  }
  if (prim$4 !== undefined) {
    tmp["aria-label"] = Caml_option.valFromOption(prim$4);
  }
  if (prim$5 !== undefined) {
    tmp["aria-roledescription"] = Caml_option.valFromOption(prim$5);
  }
  if (prim$6 !== undefined) {
    tmp["aria-expanded"] = Caml_option.valFromOption(prim$6);
  }
  if (prim$7 !== undefined) {
    tmp["aria-level"] = Caml_option.valFromOption(prim$7);
  }
  if (prim$8 !== undefined) {
    tmp["aria-modal"] = Caml_option.valFromOption(prim$8);
  }
  if (prim$9 !== undefined) {
    tmp["aria-multiline"] = Caml_option.valFromOption(prim$9);
  }
  if (prim$10 !== undefined) {
    tmp["aria-multiselectable"] = Caml_option.valFromOption(prim$10);
  }
  if (prim$11 !== undefined) {
    tmp["aria-placeholder"] = Caml_option.valFromOption(prim$11);
  }
  if (prim$12 !== undefined) {
    tmp["aria-readonly"] = Caml_option.valFromOption(prim$12);
  }
  if (prim$13 !== undefined) {
    tmp["aria-required"] = Caml_option.valFromOption(prim$13);
  }
  if (prim$14 !== undefined) {
    tmp["aria-selected"] = Caml_option.valFromOption(prim$14);
  }
  if (prim$15 !== undefined) {
    tmp["aria-sort"] = Caml_option.valFromOption(prim$15);
  }
  if (prim$16 !== undefined) {
    tmp["aria-valuemax"] = Caml_option.valFromOption(prim$16);
  }
  if (prim$17 !== undefined) {
    tmp["aria-valuemin"] = Caml_option.valFromOption(prim$17);
  }
  if (prim$18 !== undefined) {
    tmp["aria-valuenow"] = Caml_option.valFromOption(prim$18);
  }
  if (prim$19 !== undefined) {
    tmp["aria-valuetext"] = Caml_option.valFromOption(prim$19);
  }
  if (prim$20 !== undefined) {
    tmp["aria-atomic"] = Caml_option.valFromOption(prim$20);
  }
  if (prim$21 !== undefined) {
    tmp["aria-busy"] = Caml_option.valFromOption(prim$21);
  }
  if (prim$22 !== undefined) {
    tmp["aria-relevant"] = Caml_option.valFromOption(prim$22);
  }
  if (prim$23 !== undefined) {
    tmp["aria-grabbed"] = Caml_option.valFromOption(prim$23);
  }
  if (prim$24 !== undefined) {
    tmp["aria-activedescendant"] = Caml_option.valFromOption(prim$24);
  }
  if (prim$25 !== undefined) {
    tmp["aria-colcount"] = Caml_option.valFromOption(prim$25);
  }
  if (prim$26 !== undefined) {
    tmp["aria-colindex"] = Caml_option.valFromOption(prim$26);
  }
  if (prim$27 !== undefined) {
    tmp["aria-colspan"] = Caml_option.valFromOption(prim$27);
  }
  if (prim$28 !== undefined) {
    tmp["aria-controls"] = Caml_option.valFromOption(prim$28);
  }
  if (prim$29 !== undefined) {
    tmp["aria-describedby"] = Caml_option.valFromOption(prim$29);
  }
  if (prim$30 !== undefined) {
    tmp["aria-errormessage"] = Caml_option.valFromOption(prim$30);
  }
  if (prim$31 !== undefined) {
    tmp["aria-flowto"] = Caml_option.valFromOption(prim$31);
  }
  if (prim$32 !== undefined) {
    tmp["aria-labelledby"] = Caml_option.valFromOption(prim$32);
  }
  if (prim$33 !== undefined) {
    tmp["aria-owns"] = Caml_option.valFromOption(prim$33);
  }
  if (prim$34 !== undefined) {
    tmp["aria-posinset"] = Caml_option.valFromOption(prim$34);
  }
  if (prim$35 !== undefined) {
    tmp["aria-rowcount"] = Caml_option.valFromOption(prim$35);
  }
  if (prim$36 !== undefined) {
    tmp["aria-rowindex"] = Caml_option.valFromOption(prim$36);
  }
  if (prim$37 !== undefined) {
    tmp["aria-rowspan"] = Caml_option.valFromOption(prim$37);
  }
  if (prim$38 !== undefined) {
    tmp["aria-setsize"] = Caml_option.valFromOption(prim$38);
  }
  if (prim$39 !== undefined) {
    tmp.defaultChecked = Caml_option.valFromOption(prim$39);
  }
  if (prim$40 !== undefined) {
    tmp.defaultValue = Caml_option.valFromOption(prim$40);
  }
  if (prim$41 !== undefined) {
    tmp.accessKey = Caml_option.valFromOption(prim$41);
  }
  if (prim$42 !== undefined) {
    tmp.className = Caml_option.valFromOption(prim$42);
  }
  if (prim$43 !== undefined) {
    tmp.contentEditable = Caml_option.valFromOption(prim$43);
  }
  if (prim$44 !== undefined) {
    tmp.contextMenu = Caml_option.valFromOption(prim$44);
  }
  if (prim$45 !== undefined) {
    tmp.dir = Caml_option.valFromOption(prim$45);
  }
  if (prim$46 !== undefined) {
    tmp.draggable = Caml_option.valFromOption(prim$46);
  }
  if (prim$47 !== undefined) {
    tmp.hidden = Caml_option.valFromOption(prim$47);
  }
  if (prim$48 !== undefined) {
    tmp.id = Caml_option.valFromOption(prim$48);
  }
  if (prim$49 !== undefined) {
    tmp.lang = Caml_option.valFromOption(prim$49);
  }
  if (prim$50 !== undefined) {
    tmp.role = Caml_option.valFromOption(prim$50);
  }
  if (prim$51 !== undefined) {
    tmp.spellCheck = Caml_option.valFromOption(prim$51);
  }
  if (prim$52 !== undefined) {
    tmp.tabIndex = Caml_option.valFromOption(prim$52);
  }
  if (prim$53 !== undefined) {
    tmp.title = Caml_option.valFromOption(prim$53);
  }
  if (prim$54 !== undefined) {
    tmp.itemID = Caml_option.valFromOption(prim$54);
  }
  if (prim$55 !== undefined) {
    tmp.itemProp = Caml_option.valFromOption(prim$55);
  }
  if (prim$56 !== undefined) {
    tmp.itemRef = Caml_option.valFromOption(prim$56);
  }
  if (prim$57 !== undefined) {
    tmp.itemScope = Caml_option.valFromOption(prim$57);
  }
  if (prim$58 !== undefined) {
    tmp.itemType = Caml_option.valFromOption(prim$58);
  }
  if (prim$59 !== undefined) {
    tmp.accept = Caml_option.valFromOption(prim$59);
  }
  if (prim$60 !== undefined) {
    tmp.acceptCharset = Caml_option.valFromOption(prim$60);
  }
  if (prim$61 !== undefined) {
    tmp.action = Caml_option.valFromOption(prim$61);
  }
  if (prim$62 !== undefined) {
    tmp.allowFullScreen = Caml_option.valFromOption(prim$62);
  }
  if (prim$63 !== undefined) {
    tmp.alt = Caml_option.valFromOption(prim$63);
  }
  if (prim$64 !== undefined) {
    tmp.async = Caml_option.valFromOption(prim$64);
  }
  if (prim$65 !== undefined) {
    tmp.autoComplete = Caml_option.valFromOption(prim$65);
  }
  if (prim$66 !== undefined) {
    tmp.autoFocus = Caml_option.valFromOption(prim$66);
  }
  if (prim$67 !== undefined) {
    tmp.autoPlay = Caml_option.valFromOption(prim$67);
  }
  if (prim$68 !== undefined) {
    tmp.challenge = Caml_option.valFromOption(prim$68);
  }
  if (prim$69 !== undefined) {
    tmp.charSet = Caml_option.valFromOption(prim$69);
  }
  if (prim$70 !== undefined) {
    tmp.checked = Caml_option.valFromOption(prim$70);
  }
  if (prim$71 !== undefined) {
    tmp.cite = Caml_option.valFromOption(prim$71);
  }
  if (prim$72 !== undefined) {
    tmp.crossorigin = Caml_option.valFromOption(prim$72);
  }
  if (prim$73 !== undefined) {
    tmp.cols = Caml_option.valFromOption(prim$73);
  }
  if (prim$74 !== undefined) {
    tmp.colSpan = Caml_option.valFromOption(prim$74);
  }
  if (prim$75 !== undefined) {
    tmp.content = Caml_option.valFromOption(prim$75);
  }
  if (prim$76 !== undefined) {
    tmp.controls = Caml_option.valFromOption(prim$76);
  }
  if (prim$77 !== undefined) {
    tmp.coords = Caml_option.valFromOption(prim$77);
  }
  if (prim$78 !== undefined) {
    tmp.data = Caml_option.valFromOption(prim$78);
  }
  if (prim$79 !== undefined) {
    tmp.dateTime = Caml_option.valFromOption(prim$79);
  }
  if (prim$80 !== undefined) {
    tmp.default = Caml_option.valFromOption(prim$80);
  }
  if (prim$81 !== undefined) {
    tmp.defer = Caml_option.valFromOption(prim$81);
  }
  if (prim$82 !== undefined) {
    tmp.disabled = Caml_option.valFromOption(prim$82);
  }
  if (prim$83 !== undefined) {
    tmp.download = Caml_option.valFromOption(prim$83);
  }
  if (prim$84 !== undefined) {
    tmp.encType = Caml_option.valFromOption(prim$84);
  }
  if (prim$85 !== undefined) {
    tmp.form = Caml_option.valFromOption(prim$85);
  }
  if (prim$86 !== undefined) {
    tmp.formAction = Caml_option.valFromOption(prim$86);
  }
  if (prim$87 !== undefined) {
    tmp.formTarget = Caml_option.valFromOption(prim$87);
  }
  if (prim$88 !== undefined) {
    tmp.formMethod = Caml_option.valFromOption(prim$88);
  }
  if (prim$89 !== undefined) {
    tmp.headers = Caml_option.valFromOption(prim$89);
  }
  if (prim$90 !== undefined) {
    tmp.height = Caml_option.valFromOption(prim$90);
  }
  if (prim$91 !== undefined) {
    tmp.high = Caml_option.valFromOption(prim$91);
  }
  if (prim$92 !== undefined) {
    tmp.href = Caml_option.valFromOption(prim$92);
  }
  if (prim$93 !== undefined) {
    tmp.hrefLang = Caml_option.valFromOption(prim$93);
  }
  if (prim$94 !== undefined) {
    tmp.htmlFor = Caml_option.valFromOption(prim$94);
  }
  if (prim$95 !== undefined) {
    tmp.httpEquiv = Caml_option.valFromOption(prim$95);
  }
  if (prim$96 !== undefined) {
    tmp.icon = Caml_option.valFromOption(prim$96);
  }
  if (prim$97 !== undefined) {
    tmp.inputMode = Caml_option.valFromOption(prim$97);
  }
  if (prim$98 !== undefined) {
    tmp.integrity = Caml_option.valFromOption(prim$98);
  }
  if (prim$99 !== undefined) {
    tmp.keyType = Caml_option.valFromOption(prim$99);
  }
  if (prim$100 !== undefined) {
    tmp.kind = Caml_option.valFromOption(prim$100);
  }
  if (prim$101 !== undefined) {
    tmp.label = Caml_option.valFromOption(prim$101);
  }
  if (prim$102 !== undefined) {
    tmp.list = Caml_option.valFromOption(prim$102);
  }
  if (prim$103 !== undefined) {
    tmp.loop = Caml_option.valFromOption(prim$103);
  }
  if (prim$104 !== undefined) {
    tmp.low = Caml_option.valFromOption(prim$104);
  }
  if (prim$105 !== undefined) {
    tmp.manifest = Caml_option.valFromOption(prim$105);
  }
  if (prim$106 !== undefined) {
    tmp.max = Caml_option.valFromOption(prim$106);
  }
  if (prim$107 !== undefined) {
    tmp.maxLength = Caml_option.valFromOption(prim$107);
  }
  if (prim$108 !== undefined) {
    tmp.media = Caml_option.valFromOption(prim$108);
  }
  if (prim$109 !== undefined) {
    tmp.mediaGroup = Caml_option.valFromOption(prim$109);
  }
  if (prim$110 !== undefined) {
    tmp.method = Caml_option.valFromOption(prim$110);
  }
  if (prim$111 !== undefined) {
    tmp.min = Caml_option.valFromOption(prim$111);
  }
  if (prim$112 !== undefined) {
    tmp.minLength = Caml_option.valFromOption(prim$112);
  }
  if (prim$113 !== undefined) {
    tmp.multiple = Caml_option.valFromOption(prim$113);
  }
  if (prim$114 !== undefined) {
    tmp.muted = Caml_option.valFromOption(prim$114);
  }
  if (prim$115 !== undefined) {
    tmp.name = Caml_option.valFromOption(prim$115);
  }
  if (prim$116 !== undefined) {
    tmp.nonce = Caml_option.valFromOption(prim$116);
  }
  if (prim$117 !== undefined) {
    tmp.noValidate = Caml_option.valFromOption(prim$117);
  }
  if (prim$118 !== undefined) {
    tmp.open = Caml_option.valFromOption(prim$118);
  }
  if (prim$119 !== undefined) {
    tmp.optimum = Caml_option.valFromOption(prim$119);
  }
  if (prim$120 !== undefined) {
    tmp.pattern = Caml_option.valFromOption(prim$120);
  }
  if (prim$121 !== undefined) {
    tmp.placeholder = Caml_option.valFromOption(prim$121);
  }
  if (prim$122 !== undefined) {
    tmp.poster = Caml_option.valFromOption(prim$122);
  }
  if (prim$123 !== undefined) {
    tmp.preload = Caml_option.valFromOption(prim$123);
  }
  if (prim$124 !== undefined) {
    tmp.radioGroup = Caml_option.valFromOption(prim$124);
  }
  if (prim$125 !== undefined) {
    tmp.readOnly = Caml_option.valFromOption(prim$125);
  }
  if (prim$126 !== undefined) {
    tmp.rel = Caml_option.valFromOption(prim$126);
  }
  if (prim$127 !== undefined) {
    tmp.required = Caml_option.valFromOption(prim$127);
  }
  if (prim$128 !== undefined) {
    tmp.reversed = Caml_option.valFromOption(prim$128);
  }
  if (prim$129 !== undefined) {
    tmp.rows = Caml_option.valFromOption(prim$129);
  }
  if (prim$130 !== undefined) {
    tmp.rowSpan = Caml_option.valFromOption(prim$130);
  }
  if (prim$131 !== undefined) {
    tmp.sandbox = Caml_option.valFromOption(prim$131);
  }
  if (prim$132 !== undefined) {
    tmp.scope = Caml_option.valFromOption(prim$132);
  }
  if (prim$133 !== undefined) {
    tmp.scoped = Caml_option.valFromOption(prim$133);
  }
  if (prim$134 !== undefined) {
    tmp.scrolling = Caml_option.valFromOption(prim$134);
  }
  if (prim$135 !== undefined) {
    tmp.selected = Caml_option.valFromOption(prim$135);
  }
  if (prim$136 !== undefined) {
    tmp.shape = Caml_option.valFromOption(prim$136);
  }
  if (prim$137 !== undefined) {
    tmp.size = Caml_option.valFromOption(prim$137);
  }
  if (prim$138 !== undefined) {
    tmp.sizes = Caml_option.valFromOption(prim$138);
  }
  if (prim$139 !== undefined) {
    tmp.span = Caml_option.valFromOption(prim$139);
  }
  if (prim$140 !== undefined) {
    tmp.src = Caml_option.valFromOption(prim$140);
  }
  if (prim$141 !== undefined) {
    tmp.srcDoc = Caml_option.valFromOption(prim$141);
  }
  if (prim$142 !== undefined) {
    tmp.srcLang = Caml_option.valFromOption(prim$142);
  }
  if (prim$143 !== undefined) {
    tmp.srcSet = Caml_option.valFromOption(prim$143);
  }
  if (prim$144 !== undefined) {
    tmp.start = Caml_option.valFromOption(prim$144);
  }
  if (prim$145 !== undefined) {
    tmp.step = Caml_option.valFromOption(prim$145);
  }
  if (prim$146 !== undefined) {
    tmp.summary = Caml_option.valFromOption(prim$146);
  }
  if (prim$147 !== undefined) {
    tmp.target = Caml_option.valFromOption(prim$147);
  }
  if (prim$148 !== undefined) {
    tmp.type = Caml_option.valFromOption(prim$148);
  }
  if (prim$149 !== undefined) {
    tmp.useMap = Caml_option.valFromOption(prim$149);
  }
  if (prim$150 !== undefined) {
    tmp.value = Caml_option.valFromOption(prim$150);
  }
  if (prim$151 !== undefined) {
    tmp.width = Caml_option.valFromOption(prim$151);
  }
  if (prim$152 !== undefined) {
    tmp.wrap = Caml_option.valFromOption(prim$152);
  }
  if (prim$153 !== undefined) {
    tmp.accentHeight = Caml_option.valFromOption(prim$153);
  }
  if (prim$154 !== undefined) {
    tmp.accumulate = Caml_option.valFromOption(prim$154);
  }
  if (prim$155 !== undefined) {
    tmp.additive = Caml_option.valFromOption(prim$155);
  }
  if (prim$156 !== undefined) {
    tmp.alignmentBaseline = Caml_option.valFromOption(prim$156);
  }
  if (prim$157 !== undefined) {
    tmp.allowReorder = Caml_option.valFromOption(prim$157);
  }
  if (prim$158 !== undefined) {
    tmp.alphabetic = Caml_option.valFromOption(prim$158);
  }
  if (prim$159 !== undefined) {
    tmp.amplitude = Caml_option.valFromOption(prim$159);
  }
  if (prim$160 !== undefined) {
    tmp.arabicForm = Caml_option.valFromOption(prim$160);
  }
  if (prim$161 !== undefined) {
    tmp.ascent = Caml_option.valFromOption(prim$161);
  }
  if (prim$162 !== undefined) {
    tmp.attributeName = Caml_option.valFromOption(prim$162);
  }
  if (prim$163 !== undefined) {
    tmp.attributeType = Caml_option.valFromOption(prim$163);
  }
  if (prim$164 !== undefined) {
    tmp.autoReverse = Caml_option.valFromOption(prim$164);
  }
  if (prim$165 !== undefined) {
    tmp.azimuth = Caml_option.valFromOption(prim$165);
  }
  if (prim$166 !== undefined) {
    tmp.baseFrequency = Caml_option.valFromOption(prim$166);
  }
  if (prim$167 !== undefined) {
    tmp.baseProfile = Caml_option.valFromOption(prim$167);
  }
  if (prim$168 !== undefined) {
    tmp.baselineShift = Caml_option.valFromOption(prim$168);
  }
  if (prim$169 !== undefined) {
    tmp.bbox = Caml_option.valFromOption(prim$169);
  }
  if (prim$170 !== undefined) {
    tmp.begin = Caml_option.valFromOption(prim$170);
  }
  if (prim$171 !== undefined) {
    tmp.bias = Caml_option.valFromOption(prim$171);
  }
  if (prim$172 !== undefined) {
    tmp.by = Caml_option.valFromOption(prim$172);
  }
  if (prim$173 !== undefined) {
    tmp.calcMode = Caml_option.valFromOption(prim$173);
  }
  if (prim$174 !== undefined) {
    tmp.capHeight = Caml_option.valFromOption(prim$174);
  }
  if (prim$175 !== undefined) {
    tmp.clip = Caml_option.valFromOption(prim$175);
  }
  if (prim$176 !== undefined) {
    tmp.clipPath = Caml_option.valFromOption(prim$176);
  }
  if (prim$177 !== undefined) {
    tmp.clipPathUnits = Caml_option.valFromOption(prim$177);
  }
  if (prim$178 !== undefined) {
    tmp.clipRule = Caml_option.valFromOption(prim$178);
  }
  if (prim$179 !== undefined) {
    tmp.colorInterpolation = Caml_option.valFromOption(prim$179);
  }
  if (prim$180 !== undefined) {
    tmp.colorInterpolationFilters = Caml_option.valFromOption(prim$180);
  }
  if (prim$181 !== undefined) {
    tmp.colorProfile = Caml_option.valFromOption(prim$181);
  }
  if (prim$182 !== undefined) {
    tmp.colorRendering = Caml_option.valFromOption(prim$182);
  }
  if (prim$183 !== undefined) {
    tmp.contentScriptType = Caml_option.valFromOption(prim$183);
  }
  if (prim$184 !== undefined) {
    tmp.contentStyleType = Caml_option.valFromOption(prim$184);
  }
  if (prim$185 !== undefined) {
    tmp.cursor = Caml_option.valFromOption(prim$185);
  }
  if (prim$186 !== undefined) {
    tmp.cx = Caml_option.valFromOption(prim$186);
  }
  if (prim$187 !== undefined) {
    tmp.cy = Caml_option.valFromOption(prim$187);
  }
  if (prim$188 !== undefined) {
    tmp.d = Caml_option.valFromOption(prim$188);
  }
  if (prim$189 !== undefined) {
    tmp.decelerate = Caml_option.valFromOption(prim$189);
  }
  if (prim$190 !== undefined) {
    tmp.descent = Caml_option.valFromOption(prim$190);
  }
  if (prim$191 !== undefined) {
    tmp.diffuseConstant = Caml_option.valFromOption(prim$191);
  }
  if (prim$192 !== undefined) {
    tmp.direction = Caml_option.valFromOption(prim$192);
  }
  if (prim$193 !== undefined) {
    tmp.display = Caml_option.valFromOption(prim$193);
  }
  if (prim$194 !== undefined) {
    tmp.divisor = Caml_option.valFromOption(prim$194);
  }
  if (prim$195 !== undefined) {
    tmp.dominantBaseline = Caml_option.valFromOption(prim$195);
  }
  if (prim$196 !== undefined) {
    tmp.dur = Caml_option.valFromOption(prim$196);
  }
  if (prim$197 !== undefined) {
    tmp.dx = Caml_option.valFromOption(prim$197);
  }
  if (prim$198 !== undefined) {
    tmp.dy = Caml_option.valFromOption(prim$198);
  }
  if (prim$199 !== undefined) {
    tmp.edgeMode = Caml_option.valFromOption(prim$199);
  }
  if (prim$200 !== undefined) {
    tmp.elevation = Caml_option.valFromOption(prim$200);
  }
  if (prim$201 !== undefined) {
    tmp.enableBackground = Caml_option.valFromOption(prim$201);
  }
  if (prim$202 !== undefined) {
    tmp.end = Caml_option.valFromOption(prim$202);
  }
  if (prim$203 !== undefined) {
    tmp.exponent = Caml_option.valFromOption(prim$203);
  }
  if (prim$204 !== undefined) {
    tmp.externalResourcesRequired = Caml_option.valFromOption(prim$204);
  }
  if (prim$205 !== undefined) {
    tmp.fill = Caml_option.valFromOption(prim$205);
  }
  if (prim$206 !== undefined) {
    tmp.fillOpacity = Caml_option.valFromOption(prim$206);
  }
  if (prim$207 !== undefined) {
    tmp.fillRule = Caml_option.valFromOption(prim$207);
  }
  if (prim$208 !== undefined) {
    tmp.filter = Caml_option.valFromOption(prim$208);
  }
  if (prim$209 !== undefined) {
    tmp.filterRes = Caml_option.valFromOption(prim$209);
  }
  if (prim$210 !== undefined) {
    tmp.filterUnits = Caml_option.valFromOption(prim$210);
  }
  if (prim$211 !== undefined) {
    tmp.floodColor = Caml_option.valFromOption(prim$211);
  }
  if (prim$212 !== undefined) {
    tmp.floodOpacity = Caml_option.valFromOption(prim$212);
  }
  if (prim$213 !== undefined) {
    tmp.focusable = Caml_option.valFromOption(prim$213);
  }
  if (prim$214 !== undefined) {
    tmp.fontFamily = Caml_option.valFromOption(prim$214);
  }
  if (prim$215 !== undefined) {
    tmp.fontSize = Caml_option.valFromOption(prim$215);
  }
  if (prim$216 !== undefined) {
    tmp.fontSizeAdjust = Caml_option.valFromOption(prim$216);
  }
  if (prim$217 !== undefined) {
    tmp.fontStretch = Caml_option.valFromOption(prim$217);
  }
  if (prim$218 !== undefined) {
    tmp.fontStyle = Caml_option.valFromOption(prim$218);
  }
  if (prim$219 !== undefined) {
    tmp.fontVariant = Caml_option.valFromOption(prim$219);
  }
  if (prim$220 !== undefined) {
    tmp.fontWeight = Caml_option.valFromOption(prim$220);
  }
  if (prim$221 !== undefined) {
    tmp.fomat = Caml_option.valFromOption(prim$221);
  }
  if (prim$222 !== undefined) {
    tmp.from = Caml_option.valFromOption(prim$222);
  }
  if (prim$223 !== undefined) {
    tmp.fx = Caml_option.valFromOption(prim$223);
  }
  if (prim$224 !== undefined) {
    tmp.fy = Caml_option.valFromOption(prim$224);
  }
  if (prim$225 !== undefined) {
    tmp.g1 = Caml_option.valFromOption(prim$225);
  }
  if (prim$226 !== undefined) {
    tmp.g2 = Caml_option.valFromOption(prim$226);
  }
  if (prim$227 !== undefined) {
    tmp.glyphName = Caml_option.valFromOption(prim$227);
  }
  if (prim$228 !== undefined) {
    tmp.glyphOrientationHorizontal = Caml_option.valFromOption(prim$228);
  }
  if (prim$229 !== undefined) {
    tmp.glyphOrientationVertical = Caml_option.valFromOption(prim$229);
  }
  if (prim$230 !== undefined) {
    tmp.glyphRef = Caml_option.valFromOption(prim$230);
  }
  if (prim$231 !== undefined) {
    tmp.gradientTransform = Caml_option.valFromOption(prim$231);
  }
  if (prim$232 !== undefined) {
    tmp.gradientUnits = Caml_option.valFromOption(prim$232);
  }
  if (prim$233 !== undefined) {
    tmp.hanging = Caml_option.valFromOption(prim$233);
  }
  if (prim$234 !== undefined) {
    tmp.horizAdvX = Caml_option.valFromOption(prim$234);
  }
  if (prim$235 !== undefined) {
    tmp.horizOriginX = Caml_option.valFromOption(prim$235);
  }
  if (prim$236 !== undefined) {
    tmp.ideographic = Caml_option.valFromOption(prim$236);
  }
  if (prim$237 !== undefined) {
    tmp.imageRendering = Caml_option.valFromOption(prim$237);
  }
  if (prim$238 !== undefined) {
    tmp.in = Caml_option.valFromOption(prim$238);
  }
  if (prim$239 !== undefined) {
    tmp.in2 = Caml_option.valFromOption(prim$239);
  }
  if (prim$240 !== undefined) {
    tmp.intercept = Caml_option.valFromOption(prim$240);
  }
  if (prim$241 !== undefined) {
    tmp.k = Caml_option.valFromOption(prim$241);
  }
  if (prim$242 !== undefined) {
    tmp.k1 = Caml_option.valFromOption(prim$242);
  }
  if (prim$243 !== undefined) {
    tmp.k2 = Caml_option.valFromOption(prim$243);
  }
  if (prim$244 !== undefined) {
    tmp.k3 = Caml_option.valFromOption(prim$244);
  }
  if (prim$245 !== undefined) {
    tmp.k4 = Caml_option.valFromOption(prim$245);
  }
  if (prim$246 !== undefined) {
    tmp.kernelMatrix = Caml_option.valFromOption(prim$246);
  }
  if (prim$247 !== undefined) {
    tmp.kernelUnitLength = Caml_option.valFromOption(prim$247);
  }
  if (prim$248 !== undefined) {
    tmp.kerning = Caml_option.valFromOption(prim$248);
  }
  if (prim$249 !== undefined) {
    tmp.keyPoints = Caml_option.valFromOption(prim$249);
  }
  if (prim$250 !== undefined) {
    tmp.keySplines = Caml_option.valFromOption(prim$250);
  }
  if (prim$251 !== undefined) {
    tmp.keyTimes = Caml_option.valFromOption(prim$251);
  }
  if (prim$252 !== undefined) {
    tmp.lengthAdjust = Caml_option.valFromOption(prim$252);
  }
  if (prim$253 !== undefined) {
    tmp.letterSpacing = Caml_option.valFromOption(prim$253);
  }
  if (prim$254 !== undefined) {
    tmp.lightingColor = Caml_option.valFromOption(prim$254);
  }
  if (prim$255 !== undefined) {
    tmp.limitingConeAngle = Caml_option.valFromOption(prim$255);
  }
  if (prim$256 !== undefined) {
    tmp.local = Caml_option.valFromOption(prim$256);
  }
  if (prim$257 !== undefined) {
    tmp.markerEnd = Caml_option.valFromOption(prim$257);
  }
  if (prim$258 !== undefined) {
    tmp.markerHeight = Caml_option.valFromOption(prim$258);
  }
  if (prim$259 !== undefined) {
    tmp.markerMid = Caml_option.valFromOption(prim$259);
  }
  if (prim$260 !== undefined) {
    tmp.markerStart = Caml_option.valFromOption(prim$260);
  }
  if (prim$261 !== undefined) {
    tmp.markerUnits = Caml_option.valFromOption(prim$261);
  }
  if (prim$262 !== undefined) {
    tmp.markerWidth = Caml_option.valFromOption(prim$262);
  }
  if (prim$263 !== undefined) {
    tmp.mask = Caml_option.valFromOption(prim$263);
  }
  if (prim$264 !== undefined) {
    tmp.maskContentUnits = Caml_option.valFromOption(prim$264);
  }
  if (prim$265 !== undefined) {
    tmp.maskUnits = Caml_option.valFromOption(prim$265);
  }
  if (prim$266 !== undefined) {
    tmp.mathematical = Caml_option.valFromOption(prim$266);
  }
  if (prim$267 !== undefined) {
    tmp.mode = Caml_option.valFromOption(prim$267);
  }
  if (prim$268 !== undefined) {
    tmp.numOctaves = Caml_option.valFromOption(prim$268);
  }
  if (prim$269 !== undefined) {
    tmp.offset = Caml_option.valFromOption(prim$269);
  }
  if (prim$270 !== undefined) {
    tmp.opacity = Caml_option.valFromOption(prim$270);
  }
  if (prim$271 !== undefined) {
    tmp.operator = Caml_option.valFromOption(prim$271);
  }
  if (prim$272 !== undefined) {
    tmp.order = Caml_option.valFromOption(prim$272);
  }
  if (prim$273 !== undefined) {
    tmp.orient = Caml_option.valFromOption(prim$273);
  }
  if (prim$274 !== undefined) {
    tmp.orientation = Caml_option.valFromOption(prim$274);
  }
  if (prim$275 !== undefined) {
    tmp.origin = Caml_option.valFromOption(prim$275);
  }
  if (prim$276 !== undefined) {
    tmp.overflow = Caml_option.valFromOption(prim$276);
  }
  if (prim$277 !== undefined) {
    tmp.overflowX = Caml_option.valFromOption(prim$277);
  }
  if (prim$278 !== undefined) {
    tmp.overflowY = Caml_option.valFromOption(prim$278);
  }
  if (prim$279 !== undefined) {
    tmp.overlinePosition = Caml_option.valFromOption(prim$279);
  }
  if (prim$280 !== undefined) {
    tmp.overlineThickness = Caml_option.valFromOption(prim$280);
  }
  if (prim$281 !== undefined) {
    tmp.paintOrder = Caml_option.valFromOption(prim$281);
  }
  if (prim$282 !== undefined) {
    tmp.panose1 = Caml_option.valFromOption(prim$282);
  }
  if (prim$283 !== undefined) {
    tmp.pathLength = Caml_option.valFromOption(prim$283);
  }
  if (prim$284 !== undefined) {
    tmp.patternContentUnits = Caml_option.valFromOption(prim$284);
  }
  if (prim$285 !== undefined) {
    tmp.patternTransform = Caml_option.valFromOption(prim$285);
  }
  if (prim$286 !== undefined) {
    tmp.patternUnits = Caml_option.valFromOption(prim$286);
  }
  if (prim$287 !== undefined) {
    tmp.pointerEvents = Caml_option.valFromOption(prim$287);
  }
  if (prim$288 !== undefined) {
    tmp.points = Caml_option.valFromOption(prim$288);
  }
  if (prim$289 !== undefined) {
    tmp.pointsAtX = Caml_option.valFromOption(prim$289);
  }
  if (prim$290 !== undefined) {
    tmp.pointsAtY = Caml_option.valFromOption(prim$290);
  }
  if (prim$291 !== undefined) {
    tmp.pointsAtZ = Caml_option.valFromOption(prim$291);
  }
  if (prim$292 !== undefined) {
    tmp.preserveAlpha = Caml_option.valFromOption(prim$292);
  }
  if (prim$293 !== undefined) {
    tmp.preserveAspectRatio = Caml_option.valFromOption(prim$293);
  }
  if (prim$294 !== undefined) {
    tmp.primitiveUnits = Caml_option.valFromOption(prim$294);
  }
  if (prim$295 !== undefined) {
    tmp.r = Caml_option.valFromOption(prim$295);
  }
  if (prim$296 !== undefined) {
    tmp.radius = Caml_option.valFromOption(prim$296);
  }
  if (prim$297 !== undefined) {
    tmp.refX = Caml_option.valFromOption(prim$297);
  }
  if (prim$298 !== undefined) {
    tmp.refY = Caml_option.valFromOption(prim$298);
  }
  if (prim$299 !== undefined) {
    tmp.renderingIntent = Caml_option.valFromOption(prim$299);
  }
  if (prim$300 !== undefined) {
    tmp.repeatCount = Caml_option.valFromOption(prim$300);
  }
  if (prim$301 !== undefined) {
    tmp.repeatDur = Caml_option.valFromOption(prim$301);
  }
  if (prim$302 !== undefined) {
    tmp.requiredExtensions = Caml_option.valFromOption(prim$302);
  }
  if (prim$303 !== undefined) {
    tmp.requiredFeatures = Caml_option.valFromOption(prim$303);
  }
  if (prim$304 !== undefined) {
    tmp.restart = Caml_option.valFromOption(prim$304);
  }
  if (prim$305 !== undefined) {
    tmp.result = Caml_option.valFromOption(prim$305);
  }
  if (prim$306 !== undefined) {
    tmp.rotate = Caml_option.valFromOption(prim$306);
  }
  if (prim$307 !== undefined) {
    tmp.rx = Caml_option.valFromOption(prim$307);
  }
  if (prim$308 !== undefined) {
    tmp.ry = Caml_option.valFromOption(prim$308);
  }
  if (prim$309 !== undefined) {
    tmp.scale = Caml_option.valFromOption(prim$309);
  }
  if (prim$310 !== undefined) {
    tmp.seed = Caml_option.valFromOption(prim$310);
  }
  if (prim$311 !== undefined) {
    tmp.shapeRendering = Caml_option.valFromOption(prim$311);
  }
  if (prim$312 !== undefined) {
    tmp.slope = Caml_option.valFromOption(prim$312);
  }
  if (prim$313 !== undefined) {
    tmp.spacing = Caml_option.valFromOption(prim$313);
  }
  if (prim$314 !== undefined) {
    tmp.specularConstant = Caml_option.valFromOption(prim$314);
  }
  if (prim$315 !== undefined) {
    tmp.specularExponent = Caml_option.valFromOption(prim$315);
  }
  if (prim$316 !== undefined) {
    tmp.speed = Caml_option.valFromOption(prim$316);
  }
  if (prim$317 !== undefined) {
    tmp.spreadMethod = Caml_option.valFromOption(prim$317);
  }
  if (prim$318 !== undefined) {
    tmp.startOffset = Caml_option.valFromOption(prim$318);
  }
  if (prim$319 !== undefined) {
    tmp.stdDeviation = Caml_option.valFromOption(prim$319);
  }
  if (prim$320 !== undefined) {
    tmp.stemh = Caml_option.valFromOption(prim$320);
  }
  if (prim$321 !== undefined) {
    tmp.stemv = Caml_option.valFromOption(prim$321);
  }
  if (prim$322 !== undefined) {
    tmp.stitchTiles = Caml_option.valFromOption(prim$322);
  }
  if (prim$323 !== undefined) {
    tmp.stopColor = Caml_option.valFromOption(prim$323);
  }
  if (prim$324 !== undefined) {
    tmp.stopOpacity = Caml_option.valFromOption(prim$324);
  }
  if (prim$325 !== undefined) {
    tmp.strikethroughPosition = Caml_option.valFromOption(prim$325);
  }
  if (prim$326 !== undefined) {
    tmp.strikethroughThickness = Caml_option.valFromOption(prim$326);
  }
  if (prim$327 !== undefined) {
    tmp.string = Caml_option.valFromOption(prim$327);
  }
  if (prim$328 !== undefined) {
    tmp.stroke = Caml_option.valFromOption(prim$328);
  }
  if (prim$329 !== undefined) {
    tmp.strokeDasharray = Caml_option.valFromOption(prim$329);
  }
  if (prim$330 !== undefined) {
    tmp.strokeDashoffset = Caml_option.valFromOption(prim$330);
  }
  if (prim$331 !== undefined) {
    tmp.strokeLinecap = Caml_option.valFromOption(prim$331);
  }
  if (prim$332 !== undefined) {
    tmp.strokeLinejoin = Caml_option.valFromOption(prim$332);
  }
  if (prim$333 !== undefined) {
    tmp.strokeMiterlimit = Caml_option.valFromOption(prim$333);
  }
  if (prim$334 !== undefined) {
    tmp.strokeOpacity = Caml_option.valFromOption(prim$334);
  }
  if (prim$335 !== undefined) {
    tmp.strokeWidth = Caml_option.valFromOption(prim$335);
  }
  if (prim$336 !== undefined) {
    tmp.surfaceScale = Caml_option.valFromOption(prim$336);
  }
  if (prim$337 !== undefined) {
    tmp.systemLanguage = Caml_option.valFromOption(prim$337);
  }
  if (prim$338 !== undefined) {
    tmp.tableValues = Caml_option.valFromOption(prim$338);
  }
  if (prim$339 !== undefined) {
    tmp.targetX = Caml_option.valFromOption(prim$339);
  }
  if (prim$340 !== undefined) {
    tmp.targetY = Caml_option.valFromOption(prim$340);
  }
  if (prim$341 !== undefined) {
    tmp.textAnchor = Caml_option.valFromOption(prim$341);
  }
  if (prim$342 !== undefined) {
    tmp.textDecoration = Caml_option.valFromOption(prim$342);
  }
  if (prim$343 !== undefined) {
    tmp.textLength = Caml_option.valFromOption(prim$343);
  }
  if (prim$344 !== undefined) {
    tmp.textRendering = Caml_option.valFromOption(prim$344);
  }
  if (prim$345 !== undefined) {
    tmp.to = Caml_option.valFromOption(prim$345);
  }
  if (prim$346 !== undefined) {
    tmp.transform = Caml_option.valFromOption(prim$346);
  }
  if (prim$347 !== undefined) {
    tmp.u1 = Caml_option.valFromOption(prim$347);
  }
  if (prim$348 !== undefined) {
    tmp.u2 = Caml_option.valFromOption(prim$348);
  }
  if (prim$349 !== undefined) {
    tmp.underlinePosition = Caml_option.valFromOption(prim$349);
  }
  if (prim$350 !== undefined) {
    tmp.underlineThickness = Caml_option.valFromOption(prim$350);
  }
  if (prim$351 !== undefined) {
    tmp.unicode = Caml_option.valFromOption(prim$351);
  }
  if (prim$352 !== undefined) {
    tmp.unicodeBidi = Caml_option.valFromOption(prim$352);
  }
  if (prim$353 !== undefined) {
    tmp.unicodeRange = Caml_option.valFromOption(prim$353);
  }
  if (prim$354 !== undefined) {
    tmp.unitsPerEm = Caml_option.valFromOption(prim$354);
  }
  if (prim$355 !== undefined) {
    tmp.vAlphabetic = Caml_option.valFromOption(prim$355);
  }
  if (prim$356 !== undefined) {
    tmp.vHanging = Caml_option.valFromOption(prim$356);
  }
  if (prim$357 !== undefined) {
    tmp.vIdeographic = Caml_option.valFromOption(prim$357);
  }
  if (prim$358 !== undefined) {
    tmp.vMathematical = Caml_option.valFromOption(prim$358);
  }
  if (prim$359 !== undefined) {
    tmp.values = Caml_option.valFromOption(prim$359);
  }
  if (prim$360 !== undefined) {
    tmp.vectorEffect = Caml_option.valFromOption(prim$360);
  }
  if (prim$361 !== undefined) {
    tmp.version = Caml_option.valFromOption(prim$361);
  }
  if (prim$362 !== undefined) {
    tmp.vertAdvX = Caml_option.valFromOption(prim$362);
  }
  if (prim$363 !== undefined) {
    tmp.vertAdvY = Caml_option.valFromOption(prim$363);
  }
  if (prim$364 !== undefined) {
    tmp.vertOriginX = Caml_option.valFromOption(prim$364);
  }
  if (prim$365 !== undefined) {
    tmp.vertOriginY = Caml_option.valFromOption(prim$365);
  }
  if (prim$366 !== undefined) {
    tmp.viewBox = Caml_option.valFromOption(prim$366);
  }
  if (prim$367 !== undefined) {
    tmp.viewTarget = Caml_option.valFromOption(prim$367);
  }
  if (prim$368 !== undefined) {
    tmp.visibility = Caml_option.valFromOption(prim$368);
  }
  if (prim$369 !== undefined) {
    tmp.widths = Caml_option.valFromOption(prim$369);
  }
  if (prim$370 !== undefined) {
    tmp.wordSpacing = Caml_option.valFromOption(prim$370);
  }
  if (prim$371 !== undefined) {
    tmp.writingMode = Caml_option.valFromOption(prim$371);
  }
  if (prim$372 !== undefined) {
    tmp.x = Caml_option.valFromOption(prim$372);
  }
  if (prim$373 !== undefined) {
    tmp.x1 = Caml_option.valFromOption(prim$373);
  }
  if (prim$374 !== undefined) {
    tmp.x2 = Caml_option.valFromOption(prim$374);
  }
  if (prim$375 !== undefined) {
    tmp.xChannelSelector = Caml_option.valFromOption(prim$375);
  }
  if (prim$376 !== undefined) {
    tmp.xHeight = Caml_option.valFromOption(prim$376);
  }
  if (prim$377 !== undefined) {
    tmp.xlinkActuate = Caml_option.valFromOption(prim$377);
  }
  if (prim$378 !== undefined) {
    tmp.xlinkArcrole = Caml_option.valFromOption(prim$378);
  }
  if (prim$379 !== undefined) {
    tmp.xlinkHref = Caml_option.valFromOption(prim$379);
  }
  if (prim$380 !== undefined) {
    tmp.xlinkRole = Caml_option.valFromOption(prim$380);
  }
  if (prim$381 !== undefined) {
    tmp.xlinkShow = Caml_option.valFromOption(prim$381);
  }
  if (prim$382 !== undefined) {
    tmp.xlinkTitle = Caml_option.valFromOption(prim$382);
  }
  if (prim$383 !== undefined) {
    tmp.xlinkType = Caml_option.valFromOption(prim$383);
  }
  if (prim$384 !== undefined) {
    tmp.xmlns = Caml_option.valFromOption(prim$384);
  }
  if (prim$385 !== undefined) {
    tmp.xmlnsXlink = Caml_option.valFromOption(prim$385);
  }
  if (prim$386 !== undefined) {
    tmp.xmlBase = Caml_option.valFromOption(prim$386);
  }
  if (prim$387 !== undefined) {
    tmp.xmlLang = Caml_option.valFromOption(prim$387);
  }
  if (prim$388 !== undefined) {
    tmp.xmlSpace = Caml_option.valFromOption(prim$388);
  }
  if (prim$389 !== undefined) {
    tmp.y = Caml_option.valFromOption(prim$389);
  }
  if (prim$390 !== undefined) {
    tmp.y1 = Caml_option.valFromOption(prim$390);
  }
  if (prim$391 !== undefined) {
    tmp.y2 = Caml_option.valFromOption(prim$391);
  }
  if (prim$392 !== undefined) {
    tmp.yChannelSelector = Caml_option.valFromOption(prim$392);
  }
  if (prim$393 !== undefined) {
    tmp.z = Caml_option.valFromOption(prim$393);
  }
  if (prim$394 !== undefined) {
    tmp.zoomAndPan = Caml_option.valFromOption(prim$394);
  }
  if (prim$395 !== undefined) {
    tmp.about = Caml_option.valFromOption(prim$395);
  }
  if (prim$396 !== undefined) {
    tmp.datatype = Caml_option.valFromOption(prim$396);
  }
  if (prim$397 !== undefined) {
    tmp.inlist = Caml_option.valFromOption(prim$397);
  }
  if (prim$398 !== undefined) {
    tmp.prefix = Caml_option.valFromOption(prim$398);
  }
  if (prim$399 !== undefined) {
    tmp.property = Caml_option.valFromOption(prim$399);
  }
  if (prim$400 !== undefined) {
    tmp.resource = Caml_option.valFromOption(prim$400);
  }
  if (prim$401 !== undefined) {
    tmp.typeof = Caml_option.valFromOption(prim$401);
  }
  if (prim$402 !== undefined) {
    tmp.vocab = Caml_option.valFromOption(prim$402);
  }
  if (prim$403 !== undefined) {
    tmp.dangerouslySetInnerHTML = Caml_option.valFromOption(prim$403);
  }
  if (prim$404 !== undefined) {
    tmp.suppressContentEditableWarning = Caml_option.valFromOption(prim$404);
  }
  if (prim$405 !== undefined) {
    tmp.onCopy = Caml_option.valFromOption(prim$405);
  }
  if (prim$406 !== undefined) {
    tmp.onCut = Caml_option.valFromOption(prim$406);
  }
  if (prim$407 !== undefined) {
    tmp.onPaste = Caml_option.valFromOption(prim$407);
  }
  if (prim$408 !== undefined) {
    tmp.onCompositionEnd = Caml_option.valFromOption(prim$408);
  }
  if (prim$409 !== undefined) {
    tmp.onCompositionStart = Caml_option.valFromOption(prim$409);
  }
  if (prim$410 !== undefined) {
    tmp.onCompositionUpdate = Caml_option.valFromOption(prim$410);
  }
  if (prim$411 !== undefined) {
    tmp.onKeyDown = Caml_option.valFromOption(prim$411);
  }
  if (prim$412 !== undefined) {
    tmp.onKeyPress = Caml_option.valFromOption(prim$412);
  }
  if (prim$413 !== undefined) {
    tmp.onKeyUp = Caml_option.valFromOption(prim$413);
  }
  if (prim$414 !== undefined) {
    tmp.onFocus = Caml_option.valFromOption(prim$414);
  }
  if (prim$415 !== undefined) {
    tmp.onBlur = Caml_option.valFromOption(prim$415);
  }
  if (prim$416 !== undefined) {
    tmp.onChange = Caml_option.valFromOption(prim$416);
  }
  if (prim$417 !== undefined) {
    tmp.onInput = Caml_option.valFromOption(prim$417);
  }
  if (prim$418 !== undefined) {
    tmp.onSubmit = Caml_option.valFromOption(prim$418);
  }
  if (prim$419 !== undefined) {
    tmp.onClick = Caml_option.valFromOption(prim$419);
  }
  if (prim$420 !== undefined) {
    tmp.onContextMenu = Caml_option.valFromOption(prim$420);
  }
  if (prim$421 !== undefined) {
    tmp.onDoubleClick = Caml_option.valFromOption(prim$421);
  }
  if (prim$422 !== undefined) {
    tmp.onDrag = Caml_option.valFromOption(prim$422);
  }
  if (prim$423 !== undefined) {
    tmp.onDragEnd = Caml_option.valFromOption(prim$423);
  }
  if (prim$424 !== undefined) {
    tmp.onDragEnter = Caml_option.valFromOption(prim$424);
  }
  if (prim$425 !== undefined) {
    tmp.onDragExit = Caml_option.valFromOption(prim$425);
  }
  if (prim$426 !== undefined) {
    tmp.onDragLeave = Caml_option.valFromOption(prim$426);
  }
  if (prim$427 !== undefined) {
    tmp.onDragOver = Caml_option.valFromOption(prim$427);
  }
  if (prim$428 !== undefined) {
    tmp.onDragStart = Caml_option.valFromOption(prim$428);
  }
  if (prim$429 !== undefined) {
    tmp.onDrop = Caml_option.valFromOption(prim$429);
  }
  if (prim$430 !== undefined) {
    tmp.onMouseDown = Caml_option.valFromOption(prim$430);
  }
  if (prim$431 !== undefined) {
    tmp.onMouseEnter = Caml_option.valFromOption(prim$431);
  }
  if (prim$432 !== undefined) {
    tmp.onMouseLeave = Caml_option.valFromOption(prim$432);
  }
  if (prim$433 !== undefined) {
    tmp.onMouseMove = Caml_option.valFromOption(prim$433);
  }
  if (prim$434 !== undefined) {
    tmp.onMouseOut = Caml_option.valFromOption(prim$434);
  }
  if (prim$435 !== undefined) {
    tmp.onMouseOver = Caml_option.valFromOption(prim$435);
  }
  if (prim$436 !== undefined) {
    tmp.onMouseUp = Caml_option.valFromOption(prim$436);
  }
  if (prim$437 !== undefined) {
    tmp.onSelect = Caml_option.valFromOption(prim$437);
  }
  if (prim$438 !== undefined) {
    tmp.onTouchCancel = Caml_option.valFromOption(prim$438);
  }
  if (prim$439 !== undefined) {
    tmp.onTouchEnd = Caml_option.valFromOption(prim$439);
  }
  if (prim$440 !== undefined) {
    tmp.onTouchMove = Caml_option.valFromOption(prim$440);
  }
  if (prim$441 !== undefined) {
    tmp.onTouchStart = Caml_option.valFromOption(prim$441);
  }
  if (prim$442 !== undefined) {
    tmp.onScroll = Caml_option.valFromOption(prim$442);
  }
  if (prim$443 !== undefined) {
    tmp.onWheel = Caml_option.valFromOption(prim$443);
  }
  if (prim$444 !== undefined) {
    tmp.onAbort = Caml_option.valFromOption(prim$444);
  }
  if (prim$445 !== undefined) {
    tmp.onCanPlay = Caml_option.valFromOption(prim$445);
  }
  if (prim$446 !== undefined) {
    tmp.onCanPlayThrough = Caml_option.valFromOption(prim$446);
  }
  if (prim$447 !== undefined) {
    tmp.onDurationChange = Caml_option.valFromOption(prim$447);
  }
  if (prim$448 !== undefined) {
    tmp.onEmptied = Caml_option.valFromOption(prim$448);
  }
  if (prim$449 !== undefined) {
    tmp.onEncrypetd = Caml_option.valFromOption(prim$449);
  }
  if (prim$450 !== undefined) {
    tmp.onEnded = Caml_option.valFromOption(prim$450);
  }
  if (prim$451 !== undefined) {
    tmp.onError = Caml_option.valFromOption(prim$451);
  }
  if (prim$452 !== undefined) {
    tmp.onLoadedData = Caml_option.valFromOption(prim$452);
  }
  if (prim$453 !== undefined) {
    tmp.onLoadedMetadata = Caml_option.valFromOption(prim$453);
  }
  if (prim$454 !== undefined) {
    tmp.onLoadStart = Caml_option.valFromOption(prim$454);
  }
  if (prim$455 !== undefined) {
    tmp.onPause = Caml_option.valFromOption(prim$455);
  }
  if (prim$456 !== undefined) {
    tmp.onPlay = Caml_option.valFromOption(prim$456);
  }
  if (prim$457 !== undefined) {
    tmp.onPlaying = Caml_option.valFromOption(prim$457);
  }
  if (prim$458 !== undefined) {
    tmp.onProgress = Caml_option.valFromOption(prim$458);
  }
  if (prim$459 !== undefined) {
    tmp.onRateChange = Caml_option.valFromOption(prim$459);
  }
  if (prim$460 !== undefined) {
    tmp.onSeeked = Caml_option.valFromOption(prim$460);
  }
  if (prim$461 !== undefined) {
    tmp.onSeeking = Caml_option.valFromOption(prim$461);
  }
  if (prim$462 !== undefined) {
    tmp.onStalled = Caml_option.valFromOption(prim$462);
  }
  if (prim$463 !== undefined) {
    tmp.onSuspend = Caml_option.valFromOption(prim$463);
  }
  if (prim$464 !== undefined) {
    tmp.onTimeUpdate = Caml_option.valFromOption(prim$464);
  }
  if (prim$465 !== undefined) {
    tmp.onVolumeChange = Caml_option.valFromOption(prim$465);
  }
  if (prim$466 !== undefined) {
    tmp.onWaiting = Caml_option.valFromOption(prim$466);
  }
  if (prim$467 !== undefined) {
    tmp.onLoad = Caml_option.valFromOption(prim$467);
  }
  if (prim$468 !== undefined) {
    tmp.onAnimationStart = Caml_option.valFromOption(prim$468);
  }
  if (prim$469 !== undefined) {
    tmp.onAnimationEnd = Caml_option.valFromOption(prim$469);
  }
  if (prim$470 !== undefined) {
    tmp.onAnimationIteration = Caml_option.valFromOption(prim$470);
  }
  if (prim$471 !== undefined) {
    tmp.onTransitionEnd = Caml_option.valFromOption(prim$471);
  }
  return tmp;
}

export {
  makePropsFromJS ,
  makeProps ,
  
}
/* No side effect */
